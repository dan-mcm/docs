{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dan\u2019s Docs Who am I? Daniel McMahon . Connect Github LinkedIn Education Higher Diploma in Computer Science (Conversion) 2016-17 Professional Diploma in Education 2012-2013 BA Music & Geography 2009-2012 Work Software Engineer 2017-Present Education Officer 2013-2016 Student Teacher 2012-2013 Various Retail Locations 2007-2008 What are these docs and who are they for? (Me) => { Making notes & resources helps me concrete my own knowledge. Docs provide a useful and quick reference for day to day work. An excuse to experiment with a new documentation library. } (You) => { Maybe there is some useful knowledge in here relating to a language or tech concept that will help Maybe you would like to adopt something similar for your own purposes and will use this as a template } Why am I using mkdocs? It\u2019s quick and easy. I wanted to have a docs page I can quickly update when the mood strikes. Being able to update the documentation using markdown and not worrying about custom styling and css is crucial to achieve this. Once I have my knowledge solidified in a markdown structure I may consider switching to something like Gatsby or Hugo. Having previously designed page search functionality, it\u2019s also so much easier to use a pre-made solution like mkdocs that has search integrated. There\u2019s no point having all these resources if I can\u2019t search for what I need quickly and efficiently now is there?","title":"Home"},{"location":"#dans-docs","text":"","title":"Dan's Docs"},{"location":"#who-am-i","text":"Daniel McMahon . Connect Github LinkedIn Education Higher Diploma in Computer Science (Conversion) 2016-17 Professional Diploma in Education 2012-2013 BA Music & Geography 2009-2012 Work Software Engineer 2017-Present Education Officer 2013-2016 Student Teacher 2012-2013 Various Retail Locations 2007-2008","title":"Who am I?"},{"location":"#what-are-these-docs-and-who-are-they-for","text":"(Me) => { Making notes & resources helps me concrete my own knowledge. Docs provide a useful and quick reference for day to day work. An excuse to experiment with a new documentation library. } (You) => { Maybe there is some useful knowledge in here relating to a language or tech concept that will help Maybe you would like to adopt something similar for your own purposes and will use this as a template }","title":"What are these docs and who are they for?"},{"location":"#why-am-i-using-mkdocs","text":"It\u2019s quick and easy. I wanted to have a docs page I can quickly update when the mood strikes. Being able to update the documentation using markdown and not worrying about custom styling and css is crucial to achieve this. Once I have my knowledge solidified in a markdown structure I may consider switching to something like Gatsby or Hugo. Having previously designed page search functionality, it\u2019s also so much easier to use a pre-made solution like mkdocs that has search integrated. There\u2019s no point having all these resources if I can\u2019t search for what I need quickly and efficiently now is there?","title":"Why am I using mkdocs?"},{"location":"containerisation/docker/","text":"Docker Docker Commands The -it flag will allow you to ctrl+c to close the running image docker run -p 3000:3000 -it 0319d6e6a683 The -d flag will run service in the background allowing continued terminal access docker run -p 3000:3000 -d 0319d6e6a683 To push an image to Docker Hub (required for Kubernetes access) docker login docker tag imageid your-login/docker-demo docker push your-login/docker-demo To tag an image during the build process docker build -t your-login/docker-demo . docker push your-login/docker-demo","title":"Docker"},{"location":"containerisation/docker/#docker","text":"","title":"Docker"},{"location":"containerisation/docker/#docker-commands","text":"The -it flag will allow you to ctrl+c to close the running image docker run -p 3000:3000 -it 0319d6e6a683 The -d flag will run service in the background allowing continued terminal access docker run -p 3000:3000 -d 0319d6e6a683 To push an image to Docker Hub (required for Kubernetes access) docker login docker tag imageid your-login/docker-demo docker push your-login/docker-demo To tag an image during the build process docker build -t your-login/docker-demo . docker push your-login/docker-demo","title":"Docker Commands"},{"location":"containerisation/kubernetes/","text":"Kubernetes Notes based on practice following the Udemy course: Learn DevOps: The Complete Kubernetes Course . See related GitHub code files here . Vagrant Commands To build a plain ubuntu box mkdir ubuntu vagrant init ubuntu/xenial64 vagrant up Running Docker Container on Kubernetes Before launching container based on Docker image need to create pod definition Pod: describes an application running on Kubernetes Service: contain one or more tightly coupled containers (that make up the app - easily communicate with local port numbers) Setup Application on Kubernetes kubectl create -f k8s/demopod-helloworld.yml kubectl describe pod nodehelloworld.example.com kubectl port-forward nodehelloworld.example.com 8081:3000 kubectl expose pod nodehelloworld.example.com --type=NodePort --name=helloworld-service minikube service helloworld-service --url returns url of the service running = kubectl get service Useful Kubectl Commands (tie in with above example) kubectl attach helloworld.example.com kubectl exec helloworld.example.com -- ls /app lists file running inside container kubectl exec helloworld.example.com -- touch /app/test.txt creates file inside container (will disappear if the container is killed - non-persistent data) kubectl describe service helloworld-service kubectl run -i -tty busybox --image=busybox --restart=Never -- sh Kops Cluster Deployment AFTER SSHING INTO LINUX INSTANCE (vagrant via putty): setup awscli sudo apt-get install python-pip sudo pip install awscli aws configure ( use IAM role details - with admin policy ) ls -ahl ~/.aws/ ( verify credentials ) setup kubectl wget https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubectl sudo mv kubectl /usr/local/bin/ sudo chmod +x /usr/local/bin/kubectl kubectl setup keygen ssh-keygen -f .ssh/id_rsa cat .ssh/id_rsa.pub rename kops installation sudo mv /usr/local/bin/kops-linux-amd64 /usr/local/bin/kops generate cluster with your s3 bucket with route53 dns zone kops create cluster --name=kubernetes.yourowndomain.com --state=s3://kops-state-randomhash --zones=eu-west-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.yourowndomain.com kops update cluster kubernetes.yourowndomain.com --yes --state=s3://kops-state-randomhash check your cert and password to log into new cluster cat .kube/config check nodes are running kubectl get node test own program on nodes kubectl run hello-minikube --image = gcr.io/google_containers/echoserver:1.4 --port = 8080 kubectl expose deployment hello-minikube --type = NodePort kubectl get service at this point add custom rule to aws- using VPC dashbaord - select master node - modify inbound traffic - all allowed on the port of your app in this case: 31956 Test it out: http://api.kubernetes.yourowndomain.com:31956/ to delete and avoid payments kops delete cluster --name kubernetes.yourowndomain.com --state=s3://kops-state-randomhash to agree to delete kops delete cluster --name kubernetes.yourowndomain.com --state=s3://kops-state-randomhash --yes Horizontal -v- Vertical Scaling You can only horizontally scale when your pod is stateless. (i.e. kubectl scale options). Stateful pods cannot be horizontally scaled. Useful Pod Commands kubectl get pod Get info about all running pods kubectl describe pod <pod> Describe one pod kubectl expose pod <pod> --port=444 --name=frontend Expose port of a pod (creates new service) kubectl port-forward <pod> 8080 Port forward teh exposed pod port to your local machine kubectl attach <podname> -i Attach to the pod kubectl exec <pod> --command Execute a command on the pod kubectl label pods <pod> mylabel=awesome Add a new label to a pod kubectl run -i --tty busybox --image=busybox --restart=Never -- sh Run a shell in a pod - very useful for debugging. Once in you can run telnet 172.17.0.5 3000 to hit service and then command GET / kubectl scale --replicas=4 -f file.yaml Scales the number of pods replicated kubectl get rc Gets replica controllers kubectl scale --replicas=4 -f rc/helloworld-controller Scales the number of pods replicated kubectl delete rc/helloworld-controller Deletes controller Useful Deployment Commands kubectl get deployments kubectl get rs kubectl get pods --show-labels kubectl rollout status deployment/helloworld-deployment kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2 can be used to update app to latest version kubectl edit deployment/helloworld-deployment kubectl rollout history deployment/helloworld-deployment kubectl rollout undo deployment/helloworld-deployment --to-revision=n Useful Service Commands ClusterIP - virtual IP address only reachable from within the Cluster (default) NodePort - same on each node also reachable externally LoadBalancer - routes external traffic to every node on the NodePort (ELB on AWS) ExternalName can provide a DNS name for service (e.g. service discovery using DNS) - only works when DNS add-on is enabled By default service can only run between ports 30000-32767 but can be changed by adding \u2013service-node-port-range= argument to kube-apiserver minikube service service-name --url kubectl describe svc helloworld-service kubectl get svc svc short for service Labels key/value pairs attached to objects labels are not unique, multiple can be added to one objects Label selectors - you can use matching expressions to match labels kubectl get nodes --show-labels Node labels You can also use labels to tag nodes - once tagged you can use label selectors to let pods only run on specific nodes 2 steps to run a pod on a specific set of nodes: First you tag the node Then you add a nodeSelector to your pod configuration First step: add a label or multiple to your nodes: kubectl label nodes node1 hardware = high-spec kubectl label nodes node2 hardware = low = spec Second step: add a pod that uses those labels: apiVersion : v1 kind : pod metadata : name : nodehelloworld.example.com labels : app : helloworld spec : containers : - name : k8s-demo image : daniel40392/k8s-demo ports : - containerPort : 3000 nodeSelector : hardware : high-spec Health Checks To detect and resolve problems with you app, you can run health checks 2 types of healthchecks: Running a command in the container periodically Periodic checks on a URL (HTTP) apiVersion : v1 kind : pod metadata : name : nodehelloworld.example.com labels : app : helloworld spec : containers : - name : k8s-demo image : daniel40392/k8s-demo ports : - containerPort : 3000 livenessProbe : httpGet : path : / port : 3000 initialDelaySeconds : 15 timeoutSeconds : 30 You can describe pods to see the liveness in effect and success/failure counts","title":"Kubernetes"},{"location":"containerisation/kubernetes/#kubernetes","text":"Notes based on practice following the Udemy course: Learn DevOps: The Complete Kubernetes Course . See related GitHub code files here .","title":"Kubernetes"},{"location":"containerisation/kubernetes/#vagrant-commands","text":"To build a plain ubuntu box mkdir ubuntu vagrant init ubuntu/xenial64 vagrant up","title":"Vagrant Commands"},{"location":"containerisation/kubernetes/#running-docker-container-on-kubernetes","text":"Before launching container based on Docker image need to create pod definition Pod: describes an application running on Kubernetes Service: contain one or more tightly coupled containers (that make up the app - easily communicate with local port numbers)","title":"Running Docker Container on Kubernetes"},{"location":"containerisation/kubernetes/#setup-application-on-kubernetes","text":"kubectl create -f k8s/demopod-helloworld.yml kubectl describe pod nodehelloworld.example.com kubectl port-forward nodehelloworld.example.com 8081:3000 kubectl expose pod nodehelloworld.example.com --type=NodePort --name=helloworld-service minikube service helloworld-service --url returns url of the service running = kubectl get service","title":"Setup Application on Kubernetes"},{"location":"containerisation/kubernetes/#useful-kubectl-commands-tie-in-with-above-example","text":"kubectl attach helloworld.example.com kubectl exec helloworld.example.com -- ls /app lists file running inside container kubectl exec helloworld.example.com -- touch /app/test.txt creates file inside container (will disappear if the container is killed - non-persistent data) kubectl describe service helloworld-service kubectl run -i -tty busybox --image=busybox --restart=Never -- sh","title":"Useful Kubectl Commands (tie in with above example)"},{"location":"containerisation/kubernetes/#kops-cluster-deployment","text":"AFTER SSHING INTO LINUX INSTANCE (vagrant via putty): setup awscli sudo apt-get install python-pip sudo pip install awscli aws configure ( use IAM role details - with admin policy ) ls -ahl ~/.aws/ ( verify credentials ) setup kubectl wget https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/linux/amd64/kubectl sudo mv kubectl /usr/local/bin/ sudo chmod +x /usr/local/bin/kubectl kubectl setup keygen ssh-keygen -f .ssh/id_rsa cat .ssh/id_rsa.pub rename kops installation sudo mv /usr/local/bin/kops-linux-amd64 /usr/local/bin/kops generate cluster with your s3 bucket with route53 dns zone kops create cluster --name=kubernetes.yourowndomain.com --state=s3://kops-state-randomhash --zones=eu-west-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.yourowndomain.com kops update cluster kubernetes.yourowndomain.com --yes --state=s3://kops-state-randomhash check your cert and password to log into new cluster cat .kube/config check nodes are running kubectl get node test own program on nodes kubectl run hello-minikube --image = gcr.io/google_containers/echoserver:1.4 --port = 8080 kubectl expose deployment hello-minikube --type = NodePort kubectl get service at this point add custom rule to aws- using VPC dashbaord - select master node - modify inbound traffic - all allowed on the port of your app in this case: 31956 Test it out: http://api.kubernetes.yourowndomain.com:31956/ to delete and avoid payments kops delete cluster --name kubernetes.yourowndomain.com --state=s3://kops-state-randomhash to agree to delete kops delete cluster --name kubernetes.yourowndomain.com --state=s3://kops-state-randomhash --yes","title":"Kops Cluster Deployment"},{"location":"containerisation/kubernetes/#horizontal-v-vertical-scaling","text":"You can only horizontally scale when your pod is stateless. (i.e. kubectl scale options). Stateful pods cannot be horizontally scaled.","title":"Horizontal -v- Vertical Scaling"},{"location":"containerisation/kubernetes/#useful-pod-commands","text":"kubectl get pod Get info about all running pods kubectl describe pod <pod> Describe one pod kubectl expose pod <pod> --port=444 --name=frontend Expose port of a pod (creates new service) kubectl port-forward <pod> 8080 Port forward teh exposed pod port to your local machine kubectl attach <podname> -i Attach to the pod kubectl exec <pod> --command Execute a command on the pod kubectl label pods <pod> mylabel=awesome Add a new label to a pod kubectl run -i --tty busybox --image=busybox --restart=Never -- sh Run a shell in a pod - very useful for debugging. Once in you can run telnet 172.17.0.5 3000 to hit service and then command GET / kubectl scale --replicas=4 -f file.yaml Scales the number of pods replicated kubectl get rc Gets replica controllers kubectl scale --replicas=4 -f rc/helloworld-controller Scales the number of pods replicated kubectl delete rc/helloworld-controller Deletes controller","title":"Useful Pod Commands"},{"location":"containerisation/kubernetes/#useful-deployment-commands","text":"kubectl get deployments kubectl get rs kubectl get pods --show-labels kubectl rollout status deployment/helloworld-deployment kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2 can be used to update app to latest version kubectl edit deployment/helloworld-deployment kubectl rollout history deployment/helloworld-deployment kubectl rollout undo deployment/helloworld-deployment --to-revision=n","title":"Useful Deployment Commands"},{"location":"containerisation/kubernetes/#useful-service-commands","text":"ClusterIP - virtual IP address only reachable from within the Cluster (default) NodePort - same on each node also reachable externally LoadBalancer - routes external traffic to every node on the NodePort (ELB on AWS) ExternalName can provide a DNS name for service (e.g. service discovery using DNS) - only works when DNS add-on is enabled By default service can only run between ports 30000-32767 but can be changed by adding \u2013service-node-port-range= argument to kube-apiserver minikube service service-name --url kubectl describe svc helloworld-service kubectl get svc svc short for service","title":"Useful Service Commands"},{"location":"containerisation/kubernetes/#labels","text":"key/value pairs attached to objects labels are not unique, multiple can be added to one objects Label selectors - you can use matching expressions to match labels kubectl get nodes --show-labels","title":"Labels"},{"location":"containerisation/kubernetes/#node-labels","text":"You can also use labels to tag nodes - once tagged you can use label selectors to let pods only run on specific nodes 2 steps to run a pod on a specific set of nodes: First you tag the node Then you add a nodeSelector to your pod configuration First step: add a label or multiple to your nodes: kubectl label nodes node1 hardware = high-spec kubectl label nodes node2 hardware = low = spec Second step: add a pod that uses those labels: apiVersion : v1 kind : pod metadata : name : nodehelloworld.example.com labels : app : helloworld spec : containers : - name : k8s-demo image : daniel40392/k8s-demo ports : - containerPort : 3000 nodeSelector : hardware : high-spec","title":"Node labels"},{"location":"containerisation/kubernetes/#health-checks","text":"To detect and resolve problems with you app, you can run health checks 2 types of healthchecks: Running a command in the container periodically Periodic checks on a URL (HTTP) apiVersion : v1 kind : pod metadata : name : nodehelloworld.example.com labels : app : helloworld spec : containers : - name : k8s-demo image : daniel40392/k8s-demo ports : - containerPort : 3000 livenessProbe : httpGet : path : / port : 3000 initialDelaySeconds : 15 timeoutSeconds : 30 You can describe pods to see the liveness in effect and success/failure counts","title":"Health Checks"},{"location":"languages/go/","text":"Go","title":"Go"},{"location":"languages/go/#go","text":"","title":"Go"},{"location":"languages/java/","text":"Java","title":"Java"},{"location":"languages/java/#java","text":"","title":"Java"},{"location":"languages/javascript/","text":"JavaScript","title":"JavaScript"},{"location":"languages/javascript/#javascript","text":"","title":"JavaScript"},{"location":"languages/python/","text":"Python x = \"always look on\" ; y = \"the bright side\" ; z = x + y + \"of life\" ;","title":"Python"},{"location":"languages/python/#python","text":"x = \"always look on\" ; y = \"the bright side\" ; z = x + y + \"of life\" ;","title":"Python"},{"location":"languages/scala/","text":"Scala Variable Declaration // immutable val donutsToBuy : Int = 5 // mutable var favoriteDonut : String = \"Glazed Donut\" favoriteDonut = \"Vanilla Donut\" // lazy (delay the initialization until consumed by application) // this also uses type inference - note the lack of : String! lazy val donutService = \"initialize some donut service\" // declare a variable with no initialization var leastFavoriteDonut : String = _ leastFavoriteDonut = \"Plain Donut\" Supported Types val donutsBought : Int = 5 val bigNumberOfDonuts : Long = 100000000L val smallNumberOfDonuts : Short = 1 val priceOfDonut : Double = 2.50 val donutPrice : Float = 2.50f val donutStoreName : String = \"allaboutscala Donut Store\" val donutByte : Byte = 0xa val donutFirstLetter : Char = 'D' val nothing : Unit = () Collections Lists // List of Strings val fruit : List [ String ] = List ( \"apples\" , \"oranges\" , \"pears\" ) // List of Integers val nums : List [ Int ] = List ( 1 , 2 , 3 , 4 ) // Empty List. val empty : List [ Nothing ] = List () // Two dimensional list val dim : List [ List [ Int ]] = List ( List ( 1 , 0 , 0 ), List ( 0 , 1 , 0 ), List ( 0 , 0 , 1 ) ) // Basic Examples of common methods // another way of defining the fruit List above using cons (::) val fruit = \"apples\" :: ( \"oranges\" :: ( \"pears\" :: Nil )) val nums = Nil println ( \"Head of fruit : \" + fruit . head ) println ( \"Tail of fruit : \" + fruit . tail ) println ( \"Check if fruit is empty : \" + fruit . isEmpty ) println ( \"Check if nums is empty : \" + nums . isEmpty ) Sets // Empty set of integer type var s : Set [ Int ] = Set () // Set of integer type var s : Set [ Int ] = Set ( 1 , 3 , 5 , 7 ) or var s = Set ( 1 , 3 , 5 , 7 ) // find common elements between two sets val num1 = Set ( 5 , 6 , 9 , 20 , 30 , 45 ) val num2 = Set ( 50 , 60 , 9 , 20 , 35 , 55 ) println ( \"num1.&(num2) : \" + num1 .&( num2 ) ) println ( \"num1.intersect(num2) : \" + num1 . intersect ( num2 ) ) Maps // Empty hash table whose keys are strings and values are integers: var A : Map [ Char , Int ] = Map () // A map with keys and values. val colors = Map ( \"red\" -> \"#FF0000\" , \"azure\" -> \"#F0FFFF\" ) // Basic examples of common methods val colors = Map ( \"red\" -> \"#FF0000\" , \"azure\" -> \"#F0FFFF\" , \"peru\" -> \"#CD853F\" ) val nums : Map [ Int , Int ] = Map () println ( \"Keys in colors : \" + colors . keys ) println ( \"Values in colors : \" + colors . values ) println ( \"Check if colors is empty : \" + colors . isEmpty ) println ( \"Check if nums is empty : \" + nums . isEmpty ) Tuples // Short version val t = ( 1 , \"hello\" , Console ) // Long version val t = new Tuple3 ( 1 , \"hello\" , Console ) // Example Usage val t = ( 4 , 3 , 2 , 1 ) val sum = t . _1 + t . _2 + t . _3 + t . _4 println ( \"Sum of elements: \" + sum ) val t = new Tuple3 ( 1 , \"hello\" , Console ) println ( \"Concatenated String: \" + t . toString () ) Options // An Option[T] can be either Some[T] or None object, which represents a missing value. // Example object Demo { def main ( args : Array [ String ]) { val capitals = Map ( \"France\" -> \"Paris\" , \"Japan\" -> \"Tokyo\" ) println ( \"capitals.get( \\\"France\\\" ) : \" + capitals . get ( \"France\" )) println ( \"capitals.get( \\\"India\\\" ) : \" + capitals . get ( \"India\" )) } } // Example Output capitals . get ( \"France\" ) : Some ( Paris ) capitals.get ( \" India \" ) : None Iterators val it = Iterator ( \"a\" , \"number\" , \"of\" , \"words\" ) while ( it . hasNext ){ println ( it . next ()) } val ita = Iterator ( 20 , 40 , 2 , 50 , 69 , 90 ) val itb = Iterator ( 20 , 40 , 2 , 50 , 69 , 90 ) println ( \"Maximum valued element \" + ita . max ) println ( \"Minimum valued element \" + itb . min ) println ( \"Value of ita.size : \" + ita . size ) println ( \"Value of itb.length : \" + itb . length ) Conditionals/Matching If Statements var x = 10 ; if ( x < 20 ) 100 else if ( x > 20 ) 200 else 0 Pattern Matching import scala.util.Random val x : Int = Random . nextInt ( 10 ) x match { case 0 => \"zero\" case 1 => \"one\" case 2 => \"two\" case _ => \"many\" } def matchTest ( x : Int ) : String = x match { case 1 => \"one\" case 2 => \"two\" case _ => \"many\" } matchTest ( 3 ) // many matchTest ( 1 ) // one Loops For var a = 0 ; // for loop execution with a single range for ( a <- 1 to 10 ){ println ( \"Value of a: \" + a ); } var a = 0 ; var b = 0 ; // for loop execution with multiple ranges for ( a <- 1 to 3 ; b <- 1 to 3 ){ println ( \"Value of a: \" + a ); println ( \"Value of b: \" + b ); } var a = 0 ; val numList = List ( 1 , 2 , 3 , 4 , 5 , 6 ); // for loop execution with a collection for ( a <- numList ){ println ( \"Value of a: \" + a ); } var a = 0 ; val numList = List ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); // for loop execution with multiple filters for ( a <- numList if a != 3 ; if a < 8 ){ println ( \"Value of a: \" + a ); } While var a = 10 ; // while loop execution while ( a < 20 ){ println ( \"Value of a: \" + a ); a = a + 1 ; }","title":"Scala"},{"location":"languages/scala/#scala","text":"","title":"Scala"},{"location":"languages/scala/#variable-declaration","text":"// immutable val donutsToBuy : Int = 5 // mutable var favoriteDonut : String = \"Glazed Donut\" favoriteDonut = \"Vanilla Donut\" // lazy (delay the initialization until consumed by application) // this also uses type inference - note the lack of : String! lazy val donutService = \"initialize some donut service\" // declare a variable with no initialization var leastFavoriteDonut : String = _ leastFavoriteDonut = \"Plain Donut\"","title":"Variable Declaration"},{"location":"languages/scala/#supported-types","text":"val donutsBought : Int = 5 val bigNumberOfDonuts : Long = 100000000L val smallNumberOfDonuts : Short = 1 val priceOfDonut : Double = 2.50 val donutPrice : Float = 2.50f val donutStoreName : String = \"allaboutscala Donut Store\" val donutByte : Byte = 0xa val donutFirstLetter : Char = 'D' val nothing : Unit = ()","title":"Supported Types"},{"location":"languages/scala/#collections","text":"","title":"Collections"},{"location":"languages/scala/#lists","text":"// List of Strings val fruit : List [ String ] = List ( \"apples\" , \"oranges\" , \"pears\" ) // List of Integers val nums : List [ Int ] = List ( 1 , 2 , 3 , 4 ) // Empty List. val empty : List [ Nothing ] = List () // Two dimensional list val dim : List [ List [ Int ]] = List ( List ( 1 , 0 , 0 ), List ( 0 , 1 , 0 ), List ( 0 , 0 , 1 ) ) // Basic Examples of common methods // another way of defining the fruit List above using cons (::) val fruit = \"apples\" :: ( \"oranges\" :: ( \"pears\" :: Nil )) val nums = Nil println ( \"Head of fruit : \" + fruit . head ) println ( \"Tail of fruit : \" + fruit . tail ) println ( \"Check if fruit is empty : \" + fruit . isEmpty ) println ( \"Check if nums is empty : \" + nums . isEmpty )","title":"Lists"},{"location":"languages/scala/#sets","text":"// Empty set of integer type var s : Set [ Int ] = Set () // Set of integer type var s : Set [ Int ] = Set ( 1 , 3 , 5 , 7 ) or var s = Set ( 1 , 3 , 5 , 7 ) // find common elements between two sets val num1 = Set ( 5 , 6 , 9 , 20 , 30 , 45 ) val num2 = Set ( 50 , 60 , 9 , 20 , 35 , 55 ) println ( \"num1.&(num2) : \" + num1 .&( num2 ) ) println ( \"num1.intersect(num2) : \" + num1 . intersect ( num2 ) )","title":"Sets"},{"location":"languages/scala/#maps","text":"// Empty hash table whose keys are strings and values are integers: var A : Map [ Char , Int ] = Map () // A map with keys and values. val colors = Map ( \"red\" -> \"#FF0000\" , \"azure\" -> \"#F0FFFF\" ) // Basic examples of common methods val colors = Map ( \"red\" -> \"#FF0000\" , \"azure\" -> \"#F0FFFF\" , \"peru\" -> \"#CD853F\" ) val nums : Map [ Int , Int ] = Map () println ( \"Keys in colors : \" + colors . keys ) println ( \"Values in colors : \" + colors . values ) println ( \"Check if colors is empty : \" + colors . isEmpty ) println ( \"Check if nums is empty : \" + nums . isEmpty )","title":"Maps"},{"location":"languages/scala/#tuples","text":"// Short version val t = ( 1 , \"hello\" , Console ) // Long version val t = new Tuple3 ( 1 , \"hello\" , Console ) // Example Usage val t = ( 4 , 3 , 2 , 1 ) val sum = t . _1 + t . _2 + t . _3 + t . _4 println ( \"Sum of elements: \" + sum ) val t = new Tuple3 ( 1 , \"hello\" , Console ) println ( \"Concatenated String: \" + t . toString () )","title":"Tuples"},{"location":"languages/scala/#options","text":"// An Option[T] can be either Some[T] or None object, which represents a missing value. // Example object Demo { def main ( args : Array [ String ]) { val capitals = Map ( \"France\" -> \"Paris\" , \"Japan\" -> \"Tokyo\" ) println ( \"capitals.get( \\\"France\\\" ) : \" + capitals . get ( \"France\" )) println ( \"capitals.get( \\\"India\\\" ) : \" + capitals . get ( \"India\" )) } } // Example Output capitals . get ( \"France\" ) : Some ( Paris ) capitals.get ( \" India \" ) : None","title":"Options"},{"location":"languages/scala/#iterators","text":"val it = Iterator ( \"a\" , \"number\" , \"of\" , \"words\" ) while ( it . hasNext ){ println ( it . next ()) } val ita = Iterator ( 20 , 40 , 2 , 50 , 69 , 90 ) val itb = Iterator ( 20 , 40 , 2 , 50 , 69 , 90 ) println ( \"Maximum valued element \" + ita . max ) println ( \"Minimum valued element \" + itb . min ) println ( \"Value of ita.size : \" + ita . size ) println ( \"Value of itb.length : \" + itb . length )","title":"Iterators"},{"location":"languages/scala/#conditionalsmatching","text":"","title":"Conditionals/Matching"},{"location":"languages/scala/#if-statements","text":"var x = 10 ; if ( x < 20 ) 100 else if ( x > 20 ) 200 else 0","title":"If Statements"},{"location":"languages/scala/#pattern-matching","text":"import scala.util.Random val x : Int = Random . nextInt ( 10 ) x match { case 0 => \"zero\" case 1 => \"one\" case 2 => \"two\" case _ => \"many\" } def matchTest ( x : Int ) : String = x match { case 1 => \"one\" case 2 => \"two\" case _ => \"many\" } matchTest ( 3 ) // many matchTest ( 1 ) // one","title":"Pattern Matching"},{"location":"languages/scala/#loops","text":"","title":"Loops"},{"location":"languages/scala/#for","text":"var a = 0 ; // for loop execution with a single range for ( a <- 1 to 10 ){ println ( \"Value of a: \" + a ); } var a = 0 ; var b = 0 ; // for loop execution with multiple ranges for ( a <- 1 to 3 ; b <- 1 to 3 ){ println ( \"Value of a: \" + a ); println ( \"Value of b: \" + b ); } var a = 0 ; val numList = List ( 1 , 2 , 3 , 4 , 5 , 6 ); // for loop execution with a collection for ( a <- numList ){ println ( \"Value of a: \" + a ); } var a = 0 ; val numList = List ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ); // for loop execution with multiple filters for ( a <- numList if a != 3 ; if a < 8 ){ println ( \"Value of a: \" + a ); }","title":"For"},{"location":"languages/scala/#while","text":"var a = 10 ; // while loop execution while ( a < 20 ){ println ( \"Value of a: \" + a ); a = a + 1 ; }","title":"While"},{"location":"publications/dev/","text":"Publications My primary publications are posted over at dev.together . You can access my main account for an up to date list of my recent activity/publications or review the ocassionally updated list below. 2018 - DEV.to Publications Visualizing Fibonacci: For the Music Lover in You! Leveling Up: From Create-React-App to Express (& some neat styling libraries) Building A Portfolio: The Painful Way The Inspiration API: A project built with Scala & Play Framework A year in Professional Software Development Integrating Docker with your Personal Projects Lucas - A Webscraper in Go","title":"Publications"},{"location":"publications/dev/#publications","text":"My primary publications are posted over at dev.together . You can access my main account for an up to date list of my recent activity/publications or review the ocassionally updated list below.","title":"Publications"},{"location":"publications/dev/#2018-devto-publications","text":"Visualizing Fibonacci: For the Music Lover in You! Leveling Up: From Create-React-App to Express (& some neat styling libraries) Building A Portfolio: The Painful Way The Inspiration API: A project built with Scala & Play Framework A year in Professional Software Development Integrating Docker with your Personal Projects Lucas - A Webscraper in Go","title":"2018 - DEV.to Publications"}]}